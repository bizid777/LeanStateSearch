# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from state_search.v1 import state_search_pb2 as state__search_dot_v1_dot_state__search__pb2


class LeanStateSearchServiceStub(object):
    """Service for searching.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchTheorem = channel.unary_unary(
                '/state_search.v1.LeanStateSearchService/SearchTheorem',
                request_serializer=state__search_dot_v1_dot_state__search__pb2.SearchTheoremRequest.SerializeToString,
                response_deserializer=state__search_dot_v1_dot_state__search__pb2.SearchTheoremResponse.FromString,
                _registered_method=True)
        self.Feedback = channel.unary_unary(
                '/state_search.v1.LeanStateSearchService/Feedback',
                request_serializer=state__search_dot_v1_dot_state__search__pb2.FeedbackRequest.SerializeToString,
                response_deserializer=state__search_dot_v1_dot_state__search__pb2.FeedbackResponse.FromString,
                _registered_method=True)


class LeanStateSearchServiceServicer(object):
    """Service for searching.
    """

    def SearchTheorem(self, request, context):
        """Search theorem according to the query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Feedback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeanStateSearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchTheorem': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchTheorem,
                    request_deserializer=state__search_dot_v1_dot_state__search__pb2.SearchTheoremRequest.FromString,
                    response_serializer=state__search_dot_v1_dot_state__search__pb2.SearchTheoremResponse.SerializeToString,
            ),
            'Feedback': grpc.unary_unary_rpc_method_handler(
                    servicer.Feedback,
                    request_deserializer=state__search_dot_v1_dot_state__search__pb2.FeedbackRequest.FromString,
                    response_serializer=state__search_dot_v1_dot_state__search__pb2.FeedbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'state_search.v1.LeanStateSearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('state_search.v1.LeanStateSearchService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LeanStateSearchService(object):
    """Service for searching.
    """

    @staticmethod
    def SearchTheorem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/state_search.v1.LeanStateSearchService/SearchTheorem',
            state__search_dot_v1_dot_state__search__pb2.SearchTheoremRequest.SerializeToString,
            state__search_dot_v1_dot_state__search__pb2.SearchTheoremResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Feedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/state_search.v1.LeanStateSearchService/Feedback',
            state__search_dot_v1_dot_state__search__pb2.FeedbackRequest.SerializeToString,
            state__search_dot_v1_dot_state__search__pb2.FeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
